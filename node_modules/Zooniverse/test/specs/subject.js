// Generated by CoffeeScript 1.3.3
(function() {
  var Api, OtherSubject, Subject, TestSubject,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Api = require('./api');

  Subject = require('./models/subject');

  TestSubject = (function(_super) {

    __extends(TestSubject, _super);

    function TestSubject() {
      return TestSubject.__super__.constructor.apply(this, arguments);
    }

    TestSubject.configure('TestSubject');

    TestSubject.prototype.projectName = 'test';

    return TestSubject;

  })(Subject);

  OtherSubject = (function(_super) {

    __extends(OtherSubject, _super);

    function OtherSubject() {
      return OtherSubject.__super__.constructor.apply(this, arguments);
    }

    OtherSubject.configure('OtherSubject');

    OtherSubject.prototype.projectName = 'other';

    return OtherSubject;

  })(Subject);

  describe('Subject', function() {
    var mockSubjects;
    beforeEach(function() {
      return Api.init();
    });
    afterEach(function() {
      var klass, _i, _len, _ref, _results;
      _ref = [TestSubject, OtherSubject, Subject];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        klass = _ref[_i];
        _results.push(klass.destroyAll());
      }
      return _results;
    });
    mockSubjects = function() {
      var val, _i, _len, _ref, _results;
      _ref = ['first', 'second', 'third'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        val = _ref[_i];
        TestSubject.create({
          id: val
        });
        _results.push(OtherSubject.create({
          id: val
        }));
      }
      return _results;
    };
    it('should find all', function() {
      var subjects;
      mockSubjects();
      subjects = TestSubject.all();
      return expect(subjects.length).toBe(3);
    });
    it('should find first', function() {
      mockSubjects();
      return expect(TestSubject.first().id).toBe('first');
    });
    it('should find last', function() {
      mockSubjects();
      return expect(TestSubject.last().id).toBe('third');
    });
    it('should count', function() {
      mockSubjects();
      return expect(TestSubject.count()).toBe(3);
    });
    return it('should fetch', function() {
      var fetched;
      fetched = false;
      TestSubject.fetch(2).always(function() {
        return fetched = true;
      });
      waitsFor(function() {
        return fetched;
      });
      return runs(function() {
        expect(TestSubject.all().length).toBe(2);
        return expect(TestSubject.first().id).toBe('4fff2d0fc4039a09f10003e0');
      });
    });
  });

}).call(this);
