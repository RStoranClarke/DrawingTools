// Generated by CoffeeScript 1.3.3
(function() {
  var $, Message, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  $ = require('jqueryify');

  _ = require('underscore/underscore');

  Message = (function() {

    function Message(payload, proxy) {
      this.payload = payload;
      this.proxy = proxy;
      this.tapped = __bind(this.tapped, this);

      this.isDelivered = __bind(this.isDelivered, this);

      this.project = __bind(this.project, this);

      this.fail = __bind(this.fail, this);

      this.succeed = __bind(this.succeed, this);

      this.onFailure = __bind(this.onFailure, this);

      this.onSuccess = __bind(this.onSuccess, this);

      this.always = __bind(this.always, this);

      this.send = __bind(this.send, this);

      this.sent = false;
      this.deferred = new $.Deferred;
    }

    Message.prototype.send = function() {
      this.sent = true;
      this.proxy.send(this);
      return this;
    };

    Message.prototype.always = function(callback) {
      return this.tapped('always', callback);
    };

    Message.prototype.onSuccess = function(callback) {
      return this.tapped('done', callback);
    };

    Message.prototype.onFailure = function(callback) {
      return this.tapped('fail', callback);
    };

    Message.prototype.succeed = function(args) {
      return this.tapped('resolve', args);
    };

    Message.prototype.fail = function(args) {
      return this.tapped('reject', args);
    };

    Message.prototype.project = function(callback) {
      return this.tapped('pipe', callback);
    };

    Message.prototype.isDelivered = function() {
      return this.deferred.isResolved();
    };

    Message.prototype.tapped = function() {
      var args, method,
        _this = this;
      method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return _(this).tap(function() {
        var _ref;
        return (_ref = _this.deferred)[method].apply(_ref, args);
      });
    };

    return Message;

  })();

  module.exports = Message;

}).call(this);
