// Generated by CoffeeScript 1.3.3
(function() {
  var $, Api, Message, ProxyFrame, _,
    __slice = [].slice;

  $ = require('jqueryify');

  _ = require('underscore/underscore');

  ProxyFrame = require('./proxy_frame');

  Message = require('./message');

  Api = {
    messages: {},
    ready: false,
    proxy: void 0,
    get: function() {
      return Api.request.apply(Api, ['get'].concat(__slice.call(arguments)));
    },
    getJSON: function() {
      return Api.request.apply(Api, ['getJSON'].concat(__slice.call(arguments)));
    },
    post: function() {
      return Api.request.apply(Api, ['post'].concat(__slice.call(arguments)));
    },
    put: function() {
      return Api.request.apply(Api, ['put'].concat(__slice.call(arguments)));
    },
    "delete": function() {
      return Api.request.apply(Api, ['delete'].concat(__slice.call(arguments)));
    },
    init: function(options) {
      if (options == null) {
        options = {};
      }
      if (Api.proxy) {
        return;
      }
      options = $.extend({
        host: "" + window.location.protocol + "//" + window.location.host,
        proxyPath: '/proxy'
      }, options);
      Api.host = options.host;
      Api.proxy = new ProxyFrame(Api.host, options.proxyPath);
      Api.proxy.bind('load', Api.loaded);
      return Api.proxy.bind('response', Api.respond);
    },
    loaded: function() {
      var id, message, _ref, _results;
      Api.ready = true;
      _ref = Api.messages;
      _results = [];
      for (id in _ref) {
        message = _ref[id];
        if (!message.sent) {
          _results.push(Api.process(id));
        }
      }
      return _results;
    },
    request: function(type, url, data, done, fail) {
      var id, message;
      id = Api.nextId();
      if (typeof data === 'function') {
        fail = done;
        done = data;
        data = null;
      }
      message = new Message({
        id: id,
        type: type,
        url: url,
        data: data
      }, Api.proxy);
      if (done) {
        message.onSuccess(done);
      }
      if (fail) {
        message.onFailure(fail);
      }
      Api.messages[id] = message;
      if (Api.ready) {
        Api.process(id);
      }
      return message;
    },
    respond: function(ev, result) {
      var message;
      message = Api.messages[result.id];
      if (result.failure) {
        message.fail(result.response);
      } else {
        message.succeed(result.response);
      }
      return delete Api.messages[result.id];
    },
    process: function(id) {
      return Api.proxy.send(Api.messages[id]);
    },
    nextId: function() {
      return _.uniqueId('api-');
    }
  };

  module.exports = Api;

}).call(this);
