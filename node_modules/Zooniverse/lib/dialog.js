// Generated by CoffeeScript 1.3.3
(function() {
  var $, Dialog,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  $ = require('jqueryify');

  Dialog = (function() {

    Dialog.Button = (function() {

      Button.prototype.label = 'OK';

      Button.prototype.value = null;

      Button.prototype.tag = 'button';

      Button.prototype.className = 'dialog-button';

      Button.prototype.dialog = null;

      Button.prototype.el = null;

      function Button(params) {
        var property, value, _ref,
          _this = this;
        if (params == null) {
          params = {};
        }
        for (property in params) {
          if (!__hasProp.call(params, property)) continue;
          value = params[property];
          this[property] = value;
        }
        if ((_ref = this.el) == null) {
          this.el = $("<" + this.tag + " class='" + this.className + "'>" + this.label + "</" + this.tag + ">");
        }
        this.el.on('click', function() {
          _this.dialog.deferred.resolve(_this.value);
          return _this.onClick();
        });
      }

      Button.prototype.onClick = function() {};

      return Button;

    })();

    Dialog.prototype.title = '';

    Dialog.prototype.content = '<p>Lorem ipsum dolor sit amet.</p>';

    Dialog.prototype.buttons = null;

    Dialog.prototype.attachment = null;

    Dialog.prototype.callback = null;

    Dialog.prototype.className = 'dialog';

    Dialog.prototype.arrowDirection = '';

    Dialog.prototype.margin = 15;

    Dialog.prototype.el = null;

    Dialog.prototype.dialog = null;

    Dialog.prototype.contentContainer = null;

    Dialog.prototype.deferred = null;

    Dialog.prototype.promise = null;

    function Dialog(params) {
      var closer, ctorClassName, property, value, _ref,
        _this = this;
      if (params == null) {
        params = {};
      }
      this.destroy = __bind(this.destroy, this);

      this.close = __bind(this.close, this);

      this.open = __bind(this.open, this);

      this.render = __bind(this.render, this);

      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        this[property] = value;
      }
      if ((_ref = this.buttons) == null) {
        this.buttons = [
          new this.constructor.Button({
            label: 'OK',
            value: true
          })
        ];
      }
      ctorClassName = this.constructor.prototype.className;
      this.el = $("<div class=\"" + ctorClassName + "-underlay\">\n  <div class=\"" + ctorClassName + "\">\n    <button name=\"close\" class=\"" + ctorClassName + "-closer\">&times;</button>\n    <header></header>\n    <div class=\"" + ctorClassName + "-content\"></div>\n    <footer></footer>\n    <div class=\"" + ctorClassName + "-arrow\" data-direction=\"" + this.arrowDirection + "\"></div>\n  </div>\n</div>");
      this.el.addClass(this.className);
      this.dialog = this.el.children("." + ctorClassName);
      this.contentContainer = this.dialog.children("." + ctorClassName + "-content");
      this.arrow = this.dialog.children("." + ctorClassName + "-arrow");
      closer = this.dialog.children("." + ctorClassName + "-closer");
      this.el.on('click', function(_arg) {
        var target;
        target = _arg.target;
        target = $(target);
        if ((target.is(_this.el) && _this.buttons.length === 0) || target.is(closer)) {
          return _this.deferred.resolve();
        }
      });
      this.el.appendTo('body');
    }

    Dialog.prototype.render = function() {
      var button, i, label, value, _i, _len, _ref, _results;
      this.el.find('header').html(this.title);
      this.contentContainer.append(this.content);
      this.el.find('footer').empty();
      _ref = this.buttons;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        button = _ref[i];
        if (!(button instanceof this.constructor.Button)) {
          for (label in button) {
            if (!__hasProp.call(button, label)) continue;
            value = button[label];
            this.buttons[i] = new this.constructor.Button({
              label: label,
              value: value
            });
          }
        }
        this.buttons[i].dialog = this;
        _results.push(this.buttons[i].el.appendTo(this.el.find('footer')));
      }
      return _results;
    };

    Dialog.prototype.open = function() {
      this.render();
      this.el.addClass('open');
      this.attach();
      this.deferred = new $.Deferred;
      this.deferred.then(this.close);
      return this.promise = this.deferred.promise();
    };

    Dialog.prototype.attach = function(attachment) {
      var stepOffset, stepSize, target, targetOffset, targetSize, xStrings, yStrings, _base, _base1, _base2, _base3, _base4, _base5, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      this.attachment = attachment != null ? attachment : this.attachment;
      if ((_ref = this.attachment) == null) {
        this.attachment = {};
      }
      if ((_ref1 = (_base = this.attachment).x) == null) {
        _base.x = 'center';
      }
      if ((_ref2 = (_base1 = this.attachment).y) == null) {
        _base1.y = 'middle';
      }
      if ((_ref3 = (_base2 = this.attachment).to) == null) {
        _base2.to = this.el;
      }
      if ((_ref4 = (_base3 = this.attachment).at) == null) {
        _base3.at = {};
      }
      if ((_ref5 = (_base4 = this.attachment.at).x) == null) {
        _base4.x = 'center';
      }
      if ((_ref6 = (_base5 = this.attachment.at).y) == null) {
        _base5.y = 'middle';
      }
      xStrings = {
        left: 0,
        center: 0.5,
        right: 1
      };
      yStrings = {
        top: 0,
        middle: 0.5,
        bottom: 1
      };
      if (this.attachment.x in xStrings) {
        this.attachment.x = xStrings[this.attachment.x];
      }
      if (this.attachment.y in yStrings) {
        this.attachment.y = yStrings[this.attachment.y];
      }
      if (this.attachment.at.x in xStrings) {
        this.attachment.at.x = xStrings[this.attachment.at.x];
      }
      if (this.attachment.at.y in yStrings) {
        this.attachment.at.y = yStrings[this.attachment.at.y];
      }
      target = $(this.attachment.to).first();
      targetSize = {
        width: target.outerWidth(),
        height: target.outerHeight()
      };
      targetOffset = target.offset();
      stepSize = {
        width: this.dialog.outerWidth(),
        height: this.dialog.outerHeight()
      };
      stepOffset = {
        left: targetOffset.left - (stepSize.width * this.attachment.x) + (targetSize.width * this.attachment.at.x),
        top: targetOffset.top - (stepSize.height * this.attachment.y) + (targetSize.height * this.attachment.at.y)
      };
      this.dialog.css({
        position: 'absolute'
      });
      this.dialog.offset(stepOffset);
      this.arrow.attr('data-direction', this.arrowDirection);
      this.dialog.css({
        marginLeft: (function() {
          switch (this.arrowDirection) {
            case 'left':
              return +this.margin;
            case 'right':
              return -this.margin;
            default:
              return '';
          }
        }).call(this)
      });
      return this.dialog.css({
        marginTop: (function() {
          switch (this.arrowDirection) {
            case 'top':
              return +this.margin;
            case 'bottom':
              return -this.margin;
            default:
              return '';
          }
        }).call(this)
      });
    };

    Dialog.prototype.close = function() {
      this.el.removeClass('open');
      this.deferred = null;
      this.promise = null;
      if (this.callback != null) {
        return this.callback;
      }
    };

    Dialog.prototype.destroy = function() {
      return this.el.remove();
    };

    return Dialog;

  })();

  module.exports = Dialog;

}).call(this);
