// Generated by CoffeeScript 1.3.3
(function() {
  var $, BaseForm, Controller, SignInForm, SignOutForm, SignUpForm, User, templates,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = require('jqueryify');

  User = require('../models/user');

  Controller = require('./controller');

  templates = require('../views/login_form');

  BaseForm = (function(_super) {

    __extends(BaseForm, _super);

    BaseForm.prototype.events = {
      submit: 'onSubmit',
      keydown: 'onInputChange',
      change: 'onInputChange'
    };

    BaseForm.prototype.elements = {
      '.errors': 'errors',
      'input[name="username"]': 'usernameField',
      'input[name="email"]': 'emailField',
      'input[name="password"]': 'passwordField',
      'input[name="password-confirm"]': 'passwordConfirmField',
      'input[name="policy"]': 'submitButton',
      'button[type="submit"]': 'submitButton',
      '.progress': 'progress',
      'input[required]': 'requiredInputs'
    };

    function BaseForm() {
      this.onSignIn = __bind(this.onSignIn, this);

      this.onInputChange = __bind(this.onInputChange, this);

      this.onError = __bind(this.onError, this);

      this.onSubmit = __bind(this.onSubmit, this);
      BaseForm.__super__.constructor.apply(this, arguments);
      this.html(this.template);
      User.bind('sign-in', this.onSignIn);
      User.bind('sign-in-error', this.onError);
      this.onSignIn();
      this.onInputChange();
    }

    BaseForm.prototype.onSubmit = function(e) {
      if (e) {
        e.preventDefault();
      }
      this.errors.hide();
      this.errors.empty();
      return this.progress.show();
    };

    BaseForm.prototype.onError = function(error) {
      this.progress.hide();
      this.errors.append(error);
      return this.errors.show();
    };

    BaseForm.prototype.onInputChange = function() {
      var _this = this;
      return setTimeout(function() {
        var allFilledIn;
        allFilledIn = Array.prototype.every.call(_this.requiredInputs, function(el) {
          if (el.type === 'checkbox') {
            return el.checked;
          } else {
            return !!el.value;
          }
        });
        return _this.submitButton.attr({
          disabled: !allFilledIn
        });
      });
    };

    BaseForm.prototype.onSignIn = function() {
      return this.progress.hide();
    };

    return BaseForm;

  })(Controller);

  SignInForm = (function(_super) {

    __extends(SignInForm, _super);

    function SignInForm() {
      this.onSubmit = __bind(this.onSubmit, this);
      return SignInForm.__super__.constructor.apply(this, arguments);
    }

    SignInForm.prototype.className = 'sign-in';

    SignInForm.prototype.template = templates.signIn;

    SignInForm.prototype.onSubmit = function() {
      var login;
      SignInForm.__super__.onSubmit.apply(this, arguments);
      return login = User.login({
        username: this.usernameField.val(),
        password: this.passwordField.val()
      });
    };

    return SignInForm;

  })(BaseForm);

  SignUpForm = (function(_super) {

    __extends(SignUpForm, _super);

    function SignUpForm() {
      this.onSubmit = __bind(this.onSubmit, this);
      return SignUpForm.__super__.constructor.apply(this, arguments);
    }

    SignUpForm.prototype.className = 'sign-up';

    SignUpForm.prototype.template = templates.signUp;

    SignUpForm.prototype.onSubmit = function() {
      var signup;
      SignUpForm.__super__.onSubmit.apply(this, arguments);
      if (this.passwordField.val() !== this.passwordConfirmField.val()) {
        this.onError('Passwords must match!');
        this.passwordField.focus();
        return;
      }
      return signup = User.signup({
        username: this.usernameField.val(),
        password: this.passwordField.val(),
        email: this.emailField.val()
      });
    };

    return SignUpForm;

  })(BaseForm);

  SignOutForm = (function(_super) {

    __extends(SignOutForm, _super);

    function SignOutForm() {
      this.onSignIn = __bind(this.onSignIn, this);

      this.onSubmit = __bind(this.onSubmit, this);
      return SignOutForm.__super__.constructor.apply(this, arguments);
    }

    SignOutForm.prototype.className = 'sign-out';

    SignOutForm.prototype.template = templates.signOut;

    SignOutForm.prototype.onSubmit = function() {
      SignOutForm.__super__.onSubmit.apply(this, arguments);
      return User.logout();
    };

    SignOutForm.prototype.onSignIn = function() {
      var _ref;
      SignOutForm.__super__.onSignIn.apply(this, arguments);
      return this.el.find('.current').html(((_ref = User.current) != null ? _ref.name : void 0) || '');
    };

    return SignOutForm;

  })(BaseForm);

  module.exports = {
    BaseForm: BaseForm,
    SignInForm: SignInForm,
    SignUpForm: SignUpForm,
    SignOutForm: SignOutForm
  };

}).call(this);
